{"version":3,"sources":["components/Home/index.js","constants/routes.js","components/About/index.js","components/Cipher/index.js","components/MeetPokemon/index.js","components/MDlinks/index.js","components/BurgerQueen/index.js","components/Eternidad/index.js","components/ObraGris/index.js","components/MoviestillProject/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","react_router_dom","to","src","alt","About","href","Cipher","MeetPokemon","MDlinks","BurgerQueen","Eternidad","ObraGris","MoviestillProject","Navigation","App","App_Navigation","react_router","exact","path","component","HomePage","AboutPage","CipherPage","MeetPokemonPage","MDlinksPage","BurgerQueenPage","EternidadPage","ObraGrisPage","MoviestillPage","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ffbaa8e.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes'\n\nconst projects = [\n    {\n        name: 'Conoce Pokemón',\n        img: 'https://i.postimg.cc/QCHGKmRc/1949831-1.jpg',\n        category: 'front-end'\n    }\n];\n\n//console.log(projects[1].img);\n\n\nconst Home = () => (\n    <container className=\"portfolio-container\">\n\n        <div className=\"portfolio-home\">\n            <h1>Elena Silvana</h1>\n            <Link className=\"btn btn-outline-secondary btn-lg\"  to={ROUTES.ABOUT}>About</Link>\n        </div>\n\n        <div className=\"navigation-widget\"></div>\n       \n\n        <div className=\"project-list\">\n            <p>proyecto</p>\n            <img src=\"{projects[0].img}\" alt=\"imagen\"></img>\n            {/*projects.map((project, index)=> (\n                <div>\n                    <p>{project.name}</p>\n                </div>\n\n            ))*/}\n        </div>\n       \n\n    </container>\n\n\n);\n\nexport default Home;","export const HOME = \"/\";\nexport const ABOUT = \"/about\";\nexport const CIPHER = \"/cipher\";\nexport const MEETPOKEMON = \"/meetpokemon\";\nexport const MDLINKS = \"/mdlinks\";\nexport const BURGERQUEEN = \"/burgerqueen\";\nexport const ETERNIDAD = \"/eternidad\";\nexport const OBRAGRIS = \"/obragris\";\nexport const MOVIESTILLPROJECT = \"/moviestillproject\";","import React from 'react';\n\n//github https://i.postimg.cc/rpr42MkP/Git-Hub-Mark-64px.png\n//linkedin https://i.postimg.cc/cHGns214/makefg.png\n\nconst About = () => (\n    <container className=\"about-container\">\n        <div className=\"about-presentation\">\n            <h1>Hi, are you looking for me?</h1>\n            <p>I’m Elena, I’m a front end developer\n                do you liked my work? get in touch</p>\n        </div>\n        <div className=\"about-icons\">\n        <a href=\"https://github.com/elenasilvana\"><img className=\"icons-network\" src=\"https://i.postimg.cc/rpr42MkP/Git-Hub-Mark-64px.png\" alt=\"github-icon\"></img></a>\n        <a href=\"https://www.linkedin.com/in/elena-silvana-c/\"><img className=\"icons-network\" src=\"https://i.postimg.cc/cHGns214/makefg.png\n\" alt=\"linkedin-icon\"></img></a>\n        </div>\n        <div className=\"about-resume\">\n\n        </div>\n    </container>\n\n);\n\nexport default About;","import React from 'react';\n\nconst Cipher = () => (\n    <div>\n        <h1>Soy Cipher</h1>\n    </div>\n\n);\n\nexport default Cipher;","import React from 'react';\n\nconst MeetPokemon = () => (\n    <div>\n        <h1>Soy Conoce Pokemon</h1>\n    </div>\n\n);\n\nexport default MeetPokemon;","import React from 'react';\n\nconst MDlinks = () => (\n    <div>\n        <h1>Soy MDlinks</h1>\n    </div>\n\n);\n\nexport default MDlinks;","import React from 'react';\n\nconst BurgerQueen = () => (\n    <div>\n        <h1>Soy el componente de BurgerQueen</h1>\n    </div>\n\n);\n\nexport default BurgerQueen;","import React from 'react';\n\nconst Eternidad = () => (\n    <div>\n        <h1>Soy Eternidad, un proyecto de fotografía</h1>\n    </div>\n\n);\n\nexport default Eternidad;","import React from 'react';\n\nconst ObraGris = () => (\n    <div>\n        <h1>Soy Obra Gris, un proyecto de fotografía</h1>\n    </div>\n\n);\n\nexport default ObraGris;","import React from 'react';\n\nconst MoviestillProject = () => (\n    <div>\n        <h1>Soy Movie Still Project, un proyecto de fotografía</h1>\n    </div>\n\n);\n\nexport default MoviestillProject;","import React from 'react';\nimport { HashRouter as Router, Route} from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes'\n\nimport HomePage from '../Home';\nimport AboutPage from '../About';\n\n//FrontEndProjects\nimport CipherPage from '../Cipher';\nimport MeetPokemonPage from '../MeetPokemon';\nimport MDlinksPage from '../MDlinks';\nimport BurgerQueenPage from '../BurgerQueen';\n\n//Arts projects\nimport EternidadPage from '../Eternidad';\nimport ObraGrisPage from '../ObraGris';\nimport MoviestillPage from '../MoviestillProject';\n\n\n\nfunction App() {\n  return (\n   \n\n    <Router>\n      <Navigation />\n      <Route exact path=\"/\" component={HomePage} />\n      <Route path=\"/about\" component={AboutPage} />\n      <Route path=\"/cipher\" component={CipherPage} />\n      <Route path=\"/meetpokemon\" component={MeetPokemonPage} />\n      <Route path=\"/mdlinks\" component={MDlinksPage} />\n      <Route path=\"/burgerqueen\" component={BurgerQueenPage} />\n      <Route path=\"/eternidad\" component={EternidadPage} />\n      <Route path=\"/obragris\" component={ObraGrisPage} />\n      <Route path=\"/moviestillproject\" component={MoviestillPage} />\n    </Router>\n  );\n};\n\n\nconst Navigation = () => (\n  <div className=\"NavBar\">\n    <nav>\n      <ul>\n        <li>\n        <Link to={ROUTES.ABOUT}>About</Link>\n        </li>\n        <li>\n        <Link to={ROUTES.HOME}>Home</Link>\n        </li>\n        <li>\n        <Link to={ROUTES.CIPHER}>cipher</Link>\n        </li>\n        <li>\n        <Link to={ROUTES.MEETPOKEMON}>meet pokemon</Link>\n        </li>\n      </ul>\n    </nav>\n  </div>\n  );\n  \n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}